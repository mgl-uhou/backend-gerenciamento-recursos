{
	"openapi": "3.1.0",
	"info": {
		"title": "Employee Management System",
		"description": "API de gerenciamento de funcionários",
		"termsOfService": "http://localhost:3000/terms",
		"contact": {
			"email": "miguelferreiralaurentino@gmail.com"
		},
		"version": "1.0.0"
	},
	"servers": [
		{
			"url": "http://localhost:3000",
			"description": "Test API"
		}
	],
	"paths": {
		"/login": {
			"post": {
				"summary": "Login de funcionário",
				"description": "Rota onde o usuário faz login para que possa recuperar o token de acesso.",
				"tags": [ "Employees" ],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"email": {
										"type": "string"
									},
									"password": {
										"type": "string"
									}
								}
							},
							"examples": {
								"example": {
									"value": {
										"email": "teste_santos@gmail.com",
										"password": "4321dcba"
									}
								}	
							}
						}
					}
				},
				"responses": {
					"400": {
						"description": "E-mail ou senha inválidos."
					},
					"200": {
						"description": "Ok.",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"user": {
											"type": "object",
											"$ref": "#/components/schemas/Employee"
										},
										"token": {
											"type": "string"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/profile": {
			"get": {
				"summary": "Listagem de informações do próprio funcionário.",
				"description": "Rota que mostra o próprio usuário com base no token de autenticação.",
				"tags": [ "Employees" ],
				"security": [{ "bearerAuth": [] }],
				"responses": {
					"401": {
						"description": "Unauthorized."
					},
					"200": {
						"description": "Ok.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Employee"
								}
							}
						}
					}
				}
			}
		},
		"/show-assignments": {
			"get": {
				"summary": "Listagem de atribuições do funcionário.",
				"description": "Rota responsável por mostrar as definições de atribuições de um funcionário.",
				"tags": [ "Employees" ],
				"security": [{ "bearerAuth": [] }],
				"responses": {
					"400": {
						"description": "Couldn't get."
					},
					"401": {
						"description": "Unauthorized."
					},
					"200": {
						"description": "Ok.",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"Nome": {
												"type": "string"
											},
											"E-mail": {
												"type": "string"
											},
											"Início": {
												"type": "string",
												"format": "date"
											},
											"Fim": {
												"type": "string",
												"format": "date"
											},
											"Departamento": {
												"type": "string"	
											},
											"Localização": {
												"type": "string"
											}
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/employees": {
			"post": {
				"summary": "Cadastro de funcionários",
				"description": "Essa rota é responsável por cadastrar novos funcionários. A atribuição de valores dos outros atributos que não os do exemplo é feita somente por administradores na rota de atualização por id.",
				"tags": ["Employees"],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/EmployeeIsNotAdmin"
							},
							"examples": {
								"example": {
									"value": {
										"firstName": "Teste",
										"lastName": "dos Santos",
										"email": "teste_santos@gmail.com",
										"password": "4321dcba"
									}
								}
							}
						}
					}
				},
				"responses": {
					"400": {
						"description": "Employee already exists."
					},
					"403": {
						"description": "Forbidden: Unauthorized attributes."
					},
					"201": {
						"description": "Ok.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Default"
								}
							}
						}
					}
				}
			},
			"get": {
				"summary": "Listagem de funcionários",
				"description": "Essa rota é responsável por mostrar todos os funcionários cadastrados no banco.",
				"tags": ["Employees"],
				"security": [{ "bearerAuth": [] }],
				"responses": {
					"400": {
						"description": "Couldn't get employees."
					},
					"401": {
						"description": "Unauthorized"
					},
					"200": {
						"description": "Ok.",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/Employee"
									}
								}
							}
						}
					}
				}
			},
			"put": {
				"summary": "Atualização da conta do funcionário.",
				"description": "Rota que atualiza os dados do funcionário que não são proibidos por não administradores, como nome, senha e outros. Atualiza com base no token de autenticação.",
				"tags": [ "Employees" ],
				"security": [{ "bearerAuth": [] }],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/EmployeeIsNotAdmin"
							},
							"examples": {
								"example": {
									"value": {
										"lastName": "dos Santos Oliveira",
										"password": "1234abcd"
									}
								}
							}
						}
					}
				},
				"responses": {
					"500": {
						"description": "Error updating record."
					},
					"403": {
						"description": "Forbidden: Unauthorized attributes."
					},
					"404": {
						"description": "Record not found."
					},
					"200": {
						"description": "Ok.",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string"
										},
										"success": {
											"type": "object"
										},
										"error": {
											"type": "object"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/employees/{id}": {
			"get": {
				"summary": "Listagem de funcionário por ID.",
				"description": "Essa rota mostra o funcionário de acordo com o seu id.",
				"tags": ["Employees"],
				"security": [{ "bearerAuth": [] }],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID do funcionário que será buscado.",
						"required": true,
						"schema": {
							"type": "integer"
						}
					}
				],
				"responses": {
					"400": {
						"description": "Couldn't get employee."
					},
					"401": {
						"description": "Unauthorized."
					},
					"404": {
						"description": "Employee not exists."
					},
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Employee"
								}
							}
						}
					}
				}
			},
			"put": {
				"summary": "Atualização de Funcionário por ID.",
				"description": "Rota responsável para uso de administradores. Essa rota é responsável por atualizar os dados do funcionário de acordo com o seu id. A senha do funcionário NÃO é atualizada nessa rota, o próprio funcionário deve atualizá-la manualmente na rota comum.",
				"tags": ["Employees"],
				"security": [{ "bearerAuth": [] }],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID do funcionário que será atualizado.",
						"required": true,
						"schema": {
							"type": "integer"
						}
					}
				],
				"requestBody": {
					"content": { 
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Employee"
							},
							"examples": {
								"example": {
									"value": {
										"available": 0,
										"assignmentId": 1
									}
								}
							}
						}
					}
				},
				"responses": {
					"400": {
						"description": "Error updating data."
					},
					"401": {
						"description": "Unauthorized."
					},
					"404": {
						"description": "Employee not found."
					},
					"200": {
						"description": "Ok.",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"message": {
											"type": "string"
										},
										"success": {
											"type": "object"
										},
										"error": {
											"type": "object"
										}
									}
								}
							}
						}
					}
				}
			},
			"delete": {
				"summary": "Deleção de conta de funcionário por ID.",
				"description": "Rota para administradores deletarem registros de funcionário da tabela com base em seu id.",
				"tags": ["Employees"],
				"security": [{ "bearerAuth": [] }],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID do funcionário que será deletado.",
						"required": true,
						"schema": {
							"type": "integer"
						}
					}
				],
				"responses": {
					"400": {
						"description": "Couldn't delete employee."
					},
					"401": {
						"description": "Unauthorized."
					},
					"404": {
						"description": "Employee not found."
					},
					"200": {
						"description": "Ok.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Default"
								}
							}
						}
					}
				}
			}
		}, 
		"/departments": {
			"get": {
				"summary": "Listagem de departamentos",
				"description": "Mostra todos os departamentos cadastrodos no sistema. Disponível somente para administradores.",
				"tags": [ "Departments" ],
				"security": [{ "bearerAuth": [] }],
				"responses": {
					"401": {
						"description": "Unauthorized."
					},
					"200": {
						"description": "Ok.",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/Department"
									}
								}
							}
						}
					}
				}
			},
			"post": {
				"summary": "Criação de novo departamento",
				"description": "Criação de novo departamento. Disponível somente para administradores.",
				"tags": [ "Departments" ],
				"security": [{ "bearerAuth": [] }],
				"requestBody": {
					"content": { 
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Name"	
							},
							"examples": {
								"example": {
									"value": {
										"name": "Serviços Gerais"
									}
								}
							}
						}
					}
				},
				"responses": {
					"400": {
						"description": "Error creating department."
					},
					"401": {
						"description": "Unauthorized."
					},
					"201": {
						"description": "Ok.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Default"
								}
							}
						}
					}
				}
			}
		},
		"/departments/{id}": {
			"get": {
				"summary": "Listagem de departamentos por ID",
				"description": "Listagem de departamentos por ID. Disponível somente para administradores.",
				"tags": [ "Departments" ],
				"security": [{ "bearerAuth": [] }],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID do departamento que será mostrado.",
						"required": true,
						"schema": {
							"type": "integer"
						}
					}
				],
				"responses": {
					"400": {
						"description": "Couldn't get department."
					},
					"401": {
						"description": "Unauthorized."
					},
					"404": {
						"description": "Department not exists."
					},
					"200": {
						"description": "Ok.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Department"
								}
							}
						}
					}
				}
			},
			"put": {
				"summary": "Atualização de departamento por ID",
				"description": "Atualização de departamento por ID. Disponível somente para administradores.",
				"tags": [ "Departments" ],
				"security": [{ "bearerAuth": [] }],	
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID do departamento que será atualizado.",
						"required": true,
						"schema": {
							"type": "integer"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Name"	
							},
							"examples": {
								"example": {
									"value": {
										"name": "Segurança do Trabalho"
									}
								}
							}
						}
					}
				},
				"responses": {
					"401": {
						"description": "Unauthorized."
					},
					"404": {
						"description": "Department not found."
					},
					"500": {
						"description": "Error updating data."
					},
					"200": {
						"description": "Ok.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Updated"
								}
							}
						}
					}
				}
			}, 
			"delete": {
				"summary": "Deleção de departamento por ID",
				"description": "Deleção de departamento por ID. Disponível somente para administradores.",
				"tags": [ "Departments" ],
				"security": [{ "bearerAuth": [] }],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID do departamento que será deletado.",
						"required": true,
						"schema": {
							"type": "integer"
						}
					}
				],
				"responses": {
					"400": {
						"description": "Couldn't delete department."
					},
					"401": {
						"description": "Unauthorized."
					},
					"404": {
						"description": "Department not exists."
					},
					"200": {
						"description": "Ok.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Default"
								}
							}
						}
					}
				}
			}
		},
		"/locations": {
			"get": {
				"summary": "Listagem de localizações.",
				"description": "Rota que mostra todos os locais cadastrados.",
				"tags": [ "Locations" ],
				"security": [{ "bearerAuth": [] }],
				"responses": {
					"401": {
						"description": "Unauthorized."
					},
					"200": {
						"description": "Ok.",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/Location"
									}
								}
							}
						}
					}
				}
			},
			"post": {
				"summary": "Criação de novo local.",
				"description": "Criação de novo local. Disponível somente para administradores.",
				"tags": [ "Locations" ],
				"security": [{ "bearerAuth": [] }],
				"requestBody": {
					"content": { 
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"name": {
										"type": "string"
									},
									"address": {
										"type": "string"
									}
								}	
							},
							"examples": {
								"example": {
									"value": {
										"name": "Colégio Estadual",
										"address": "Av. Inexistente, Rua 0, Nº 000 - Brasil"
									}
								}
							}
						}
					}
				},
				"responses": {
					"400": {
						"description": "Error creating location."
					},
					"401": {
						"description": "Unauthorized."
					},
					"201": {
						"description": "Ok.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Default"
								}
							}
						}
					}
				}
			}
		},
		"/locations/{id}": {
			"get": {
				"summary": "Listagem de localizações por ID.",
				"description": "Listagem de localizações por ID. Disponível somente para administradores.",
				"tags": [ "Locations" ],
				"security": [{ "bearerAuth": [] }],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID do local que será mostrado.",
						"required": true,
						"schema": {
							"type": "integer"
						}
					}
				],
				"responses": {
					"400": {
						"description": "Couldn't get location."
					},
					"401": {
						"description": "Unauthorized."
					},
					"404": {
						"description": "Employee not exists."
					},
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Location"
								}
							}
						}
					}
				}
			},
			"put": {
				"summary": "Atualização de local por ID.",
				"description": "Rota responsável por atualizar os dados de um local. Disponível somente para administradores.",
				"tags": [ "Locations" ],
				"security": [{ "bearerAuth": [] }],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID do local que será atualizado.",
						"required": true,
						"schema": {
							"type": "integer"
						}
					}
				],
				"requestBody": {
					"content": { 
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"name": {
										"type": "string"
									},
									"address": {
										"type": "string"
									}
								}
							},
							"examples": {
								"example": {
									"value": {
										"name": "Colégio Estadual Estrela"
									}
								}
							}
						}
					}
				},
				"responses": {
					"400": {
						"description": "Error updating location."
					}, 
					"401": {
						"description": "Unauthorized"
					},
					"404": {
						"description": "Location not found."
					},
					"200": {
						"description": "Ok.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Updated"
								}
							}
						}
					}
				}
			},
			"delete": {
				"summary": "Deleção de localização por ID",
				"description": "Rota de deleção de localização por ID. Disponível somente para administradores.",
				"tags": [ "Locations" ],
				"security": [{ "bearerAuth": [] }],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID do local que será deletado.",
						"required": true,
						"schema": {
							"type": "integer"
						}
					}
				],
				"responses": {
					"400": {
						"description": "Couldn't delete location."
					},
					"401": {
						"description": "Unauthorized."
					},
					"404": {
						"description": "Location not exists."
					},
					"200": {
						"description": "Ok.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Default"
								}
							}
						}
					}
				}
			}
		},
		"/location-departments": {
			"get": {
				"summary": "Listagem da tabela de relacionamento de Locations e Departments.",
				"description": "Rota que mostra todos os registros da tabela e relacionamento de Locations de Department. Disponível somente para administradores.",
				"tags": [ "Location-Departments" ],
				"security": [{ "bearerAuth": [] }],
				"responses": {
					"401": {
						"description": "Unauthorized."
					},
					"200": {
						"description": "Ok.",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/LocationDepartment"
									}
								}
							}
						}
					}
				}
			},
			"post": {
				"summary": "Criação de novo relacionamento de Locations e Department.",
				"description": "Criação de novo relacionamento de Locations e Department. Disponível somente para administradores.",
				"tags": [ "Location-Departments" ],
				"security": [{ "bearerAuth": [] }],
				"requestBody": {
					"content": { 
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LocationDepartment"	
							},
							"examples": {
								"example": {
									"value": {
										"locationId": 1,
										"departmentId": 1,
										"minCapacity": 10,
										"maxCapacity": 12
									}
								}
							}
						}
					}
				},
				"responses": {
					"400": {
						"description": "Error creating location-department."
					},
					"401": {
						"description": "Unauthorized."
					},
					"201": {
						"description": "Ok.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Default"
								}
							}
						}
					}
				}
			}
		},
		"/location-departments/{id}": {
			"get": {
				"summary": "Listagem da tabela de relacionamento de Locations e Departments.",
				"description": "Rota que mostra todos os registros da tabela de relacionamento de Locations e Department. Disponível somente para administradores.",
				"tags": [ "Location-Departments" ],
				"security": [{ "bearerAuth": [] }],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID do local que será mostrado.",
						"required": true,
						"schema": {
							"type": "integer"
						}
					}
				],
				"responses": {
					"400": {
						"description": "Couldn't get record."
					},
					"401": {
						"description": "Unauthorized."
					}, 
					"404": {
						"description": "Record not exists."
					},
					"200": {
						"description": "Ok.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LocationDepartment"
								}
							}
						}
					}
				}
			}
		},
		"/assignments": {
			"get": {
				"summary": "Listagem de atribuições.",
				"description": "Rota que mostra todos os registros da tabela de atribuições. Disponível somente para administradores.",
				"tags": [ "Assignments" ],
				"security": [{ "bearerAuth": [] }],
				"responses": {
					"400": {
						"description": "Could't get assignments."
					},
					"401": {
						"description": "Unauthorized."
					},
					"404": {
						"description": "Assignments not exists."
					},
					"200": {
						"description": "Ok.",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/Assignment"
									}
								}
							}
						}
					}
				}
			},
			"post": {
				"summary": "Criação de nova atribuição.",
				"description": "Criação de nova atribuição. Disponível somente para administradores.",
				"tags": [ "Assignments" ],
				"security": [{ "bearerAuth": [] }],
				"requestBody": {
					"content": { 
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Assignment"	
							},
							"examples": {
								"example": {
									"value": {
										"startDate": "2024-09-02",
										"endDate": "2024-12-15",
										"locationId": 2,
										"departmentId": 3
									}
								}
							}
						}
					}
				},
				"responses": {
					"400": {
						"description": "Error creating assignment."
					},
					"401": {
						"description": "Unauthorized."
					},
					"201": {
						"description": "Ok.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Default"
								}
							}
						}
					}
				}
			}
		},
		"/assignments/{id}": {
			"get": {
				"summary": "Listagem de atribuições por ID.",
				"description": "Rota que mostra todos os registros da tabela de atribuições. Disponível somente para administradores.",
				"tags": [ "Assignments" ],
				"security": [{ "bearerAuth": [] }],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID da atribuição que será mostrada.",
						"required": true,
						"schema": {
							"type": "integer"
						}
					}
				],
				"responses": {
					"400": {
						"description": "Could't get assignment."
					},
					"401": {
						"description": "Unauthorized."
					},
					"404": {
						"description": "Assignment not exists."
					},
					"200": {
						"description": "Ok.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Assignment"
								}
							}
						}
					}
				}
			},
			"put": {
				"summary": "Atualização de atribuição por ID.",
				"description": "Atualização de atribuição por ID. Disponível somente para administradores.",
				"tags": [ "Assignments" ],
				"security": [{ "bearerAuth": [] }],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID da atribuição que será atualizada.",
						"required": true,
						"schema": {
							"type": "integer"
						}
					}
				],
				"requestBody": {
					"content": { 
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Assignment"
							},
							"examples": {
								"example": {
									"value": {
										"locationId": 1
									}
								}
							}
						}
					}
				},
				"responses": {
					"400": {
						"description": "Could't update assignment."
					},
					"401": {
						"description": "Unauthorized."
					},
					"404": {
						"description": "Assignment not exists."
					}, 
					"200": {
						"description": "Ok.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Updated"
								}
							}
						}
					}
				}
			},
			"delete": {
				"summary": "Deleção de atribuição por ID.",
				"description": "Rota deleção de atribuição por ID. Disponível somente para administradores.",
				"tags": [ "Assignments" ],
				"security": [{ "bearerAuth": [] }],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID da atribuição que será deletada.",
						"required": true,
						"schema": {
							"type": "integer"
						}
					}
				],
				"responses": {
					"400": {
						"description": "Couldn't delete assignment."
					},
					"401": {
						"description": "Unauthorized."
					},
					"404": {
						"description": "Assignment not exists."
					},
					"200": {
						"description": "Ok.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Default"
								}
							}
						}
					}
				}
			}
		}
	},
	"components": {
		"schemas": {
			"Name": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string"
					}
				}
				
			},
			"Employee": {
				"type": "object",
				"properties": {
					"firstName": {
						"type": "string"
					},
					"lastName": {
						"type": "string"
					},
					"email": {
						"type": "string"
					},
					"birthDate": {
						"type": "string",
						"format": "date"
					},
					"vacationStart": {
						"type": "string",
						"format": "date"
					},
					"vacationEnd": {
						"type": "string",
						"format": "date"
					},
					"available": {
						"type": "integer"
					},
					"isAdmin": {
						"type": "integer"
					},
					"assignmentId": {
						"type": "integer"
					}
				}
			},
			"EmployeeIsNotAdmin": {
				"type": "object",
				"properties": {
					"firstName": {
						"type": "string"
					},
					"lastName": {
						"type": "string"
					},
					"email": {
						"type": "string"
					},
					"password": {
						"type": "string"
					},
					"birthDate": {
						"type": "string",
						"format": "date"
					}
				}
			},
			"Department": {
				"type": "object",
				"properties": {
					"id": {
						"type": "integer"
					},
					"name": {
						"type": "string"
					}
				}
			},
			"Location": {
				"type": "object",
				"properties": {
					"id": {
						"type": "integer"
					},
					"name": {
						"type": "string"
					},
					"address": {
						"type": "string"
					}
				}
			},
			"LocationDepartment": {
				"type": "object",
				"properties": {
					"locationId": {
						"type": "integer"
					},
					"departmentId": {
						"type": "integer"
					},
					"minCapacity": {
						"type": "integer"
					},
					"maxCapacity": {
						"type": "integer"
					}
				}
			},
			"Assignment": {
				"type": "object",
				"properties": {
					"id": {
						"type": "integer"
					},
					"startDate": {
						"type": "string",
						"format": "date"
					},
					"endDate": {
						"type": "string",
						"format": "date"
					},
					"locationId": {
						"type": "integer"
					},
					"departmentId": {
						"type": "integer"
					}
				}
			},
			"Default": {
				"type": "object",
				"properties": {
					"fieldCount": {
						"type": "integer"
					},
					"affectedRows": {
						"type": "integer"
					},
					"insertId": {
						"type": "integer"
					},
					"info": {
						"type": "string"
					},
					"serverStatus": {
						"type": "integer"
					},
					"warningStatus": {
						"type": "integer"
					},
					"changedRows": {
						"type": "integer"
					}
				}
			},
			"Updated": {
				"type": "object",
				"properties": {
					"success": {
						"type": "object",
						"properties": {
							"attributeUpdated": {
								"$ref": "#/components/schemas/Default"
							}
						}
					},
					"error": {
						"type": "object"
					}
				}
			}
		},
		"securitySchemes": {
			"bearerAuth": {
				"type": "http",
				"scheme": "bearer",
				"bearerFormat": "JWT"
			}
		}
	}
}
